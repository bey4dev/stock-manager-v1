import { GOOGLE_CONFIG } from '../config/google-sheets';

declare global {
  interface Window {
    gapi: any;
    google: any;
  }
}

export interface Product {
  id: string;
  name: string;
  category: string;
  price: number;
  stock: number;
  cost: number;
  description: string;
  status: 'Active' | 'Inactive';
}

export interface Sale {
  id: string;
  date: string;
  product: string;
  quantity: number;
  price: number;
  total: number;
  customer: string;
}

export interface Purchase {
  id: string;
  date: string;
  product: string;
  quantity: number;
  cost: number;
  total: number;
  supplier: string;
}

export interface DashboardMetrics {
  totalProducts: number;
  totalSales: number;
  totalRevenue: number;
  totalPurchases: number;
  totalCost: number;
  profit: number;
  topProducts: Array<{ name: string; sales: number }>;
  monthlySales: Array<{ month: string; amount: number }>;
}

class GoogleSheetsService {
  private gapiInited = false;
  private gisInited = false;
  private tokenClient: any = null;
  private isAuthenticated = false;

  constructor() {
    this.initGoogleAPI();
  }

  // Initialize Google API
  private initGoogleAPI() {
    // Load Google API script
    const gapiScript = document.createElement('script');
    gapiScript.src = 'https://apis.google.com/js/api.js';
    gapiScript.onload = () => this.gapiLoaded();
    document.head.appendChild(gapiScript);

    // Load Google Identity Services script
    const gisScript = document.createElement('script');
    gisScript.src = 'https://accounts.google.com/gsi/client';
    gisScript.onload = () => this.gisLoaded();
    document.head.appendChild(gisScript);
  }

  private gapiLoaded() {
    window.gapi.load('client', () => this.initializeGapiClient());
  }

  private async initializeGapiClient() {
    await window.gapi.client.init({
      apiKey: GOOGLE_CONFIG.API_KEY,
      discoveryDocs: [GOOGLE_CONFIG.DISCOVERY_DOC],
    });
    this.gapiInited = true;
    this.maybeEnableAuth();
  }

  private gisLoaded() {
    this.tokenClient = window.google.accounts.oauth2.initTokenClient({
      client_id: GOOGLE_CONFIG.CLIENT_ID,
      scope: GOOGLE_CONFIG.SCOPES,
      callback: '', // defined later
    });
    this.gisInited = true;
    this.maybeEnableAuth();
  }

  private maybeEnableAuth() {
    if (this.gapiInited && this.gisInited) {
      console.log('Google Sheets API ready');
    }
  }

  // Authentication
  async authenticate(): Promise<boolean> {
    console.log('üîê Starting Google authentication...');

    return new Promise((resolve) => {
      this.tokenClient.callback = async (resp: any) => {
        if (resp.error !== undefined) {
          console.error('‚ùå Authentication error:', resp.error);
          resolve(false);
          return;
        }
        console.log('‚úÖ Google authentication successful');
        this.isAuthenticated = true;
        resolve(true);
      };

      if (window.gapi.client.getToken() === null) {
        console.log('üîë Requesting new access token...');
        this.tokenClient.requestAccessToken({ prompt: 'consent' });
      } else {
        console.log('üîë Using existing token...');
        this.tokenClient.requestAccessToken({ prompt: '' });
      }
    });
  }

  signOut() {
    if (DEMO_MODE) {
      this.isAuthenticated = false;
      return;
    }

    const token = window.gapi.client.getToken();
    if (token !== null) {
      window.google.accounts.oauth2.revoke(token.access_token);
      window.gapi.client.setToken('');
      this.isAuthenticated = false;
    }
  }

  get authenticated() {
    return this.isAuthenticated;
  }

  // Get user profile information from Google
  async getUserProfile(): Promise<any> {
    if (DEMO_MODE) {
      console.log('üì± Demo mode: returning demo user profile');
      return { name: 'Demo User', email: 'demo@example.com' };
    }

    try {
      console.log('üë§ [DEBUG] Starting getUserProfile with GIS...');
      
      if (!window.gapi) {
        console.error('‚ùå [DEBUG] window.gapi not available');
        return { name: 'Google User (No GAPI)', email: 'user@gmail.com' };
      }

      if (!window.gapi.client) {
        console.error('‚ùå [DEBUG] window.gapi.client not available');
        return { name: 'Google User (No Client)', email: 'user@gmail.com' };
      }

      // Check if we have a valid token
      const token = window.gapi.client.getToken();
      if (!token || !token.access_token) {
        console.error('‚ùå [DEBUG] No access token available');
        return { name: 'Google User (No Token)', email: 'user@gmail.com' };
      }

      console.log('üîç [DEBUG] Access token available:', !!token.access_token);

      // Use People API to get user profile with the current token
      try {
        console.log('üîç [DEBUG] Fetching user info from People API...');
        
        // Load People API if not already loaded
        if (!window.gapi.client.people) {
          console.log('üîç [DEBUG] Loading People API...');
          await window.gapi.client.load('people', 'v1');
        }

        // Get user profile using People API
        const response = await window.gapi.client.people.people.get({
          resourceName: 'people/me',
          personFields: 'names,emailAddresses,photos'
        });

        console.log('üîç [DEBUG] People API response:', response);

        const person = response.result;
        const name = person.names && person.names.length > 0 ? person.names[0].displayName : null;
        const email = person.emailAddresses && person.emailAddresses.length > 0 ? person.emailAddresses[0].value : null;
        const picture = person.photos && person.photos.length > 0 ? person.photos[0].url : null;

        const userProfile = {
          name: name || 'Google User (No Name)',
          email: email || 'user@gmail.com',
          picture: picture || null,
          id: person.resourceName || null
        };

        console.log('‚úÖ [DEBUG] People API profile:', userProfile);
        return userProfile;

      } catch (peopleApiError) {
        console.error('‚ùå [DEBUG] People API error:', peopleApiError);
        
        // Fallback: Try to get user info from OAuth2 userinfo endpoint
        try {
          console.log('üîç [DEBUG] Trying OAuth2 userinfo endpoint...');
          
          const response = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {
            headers: {
              'Authorization': `Bearer ${token.access_token}`
            }
          });

          if (response.ok) {
            const userData = await response.json();
            console.log('üîç [DEBUG] OAuth2 userinfo response:', userData);

            const userProfile = {
              name: userData.name || userData.given_name || 'Google User (OAuth2)',
              email: userData.email || 'user@gmail.com',
              picture: userData.picture || null,
              id: userData.id || null
            };

            console.log('‚úÖ [DEBUG] OAuth2 userinfo profile:', userProfile);
            return userProfile;
          } else {
            console.error('‚ùå [DEBUG] OAuth2 userinfo failed:', response.status);
          }
        } catch (oauthError) {
          console.error('‚ùå [DEBUG] OAuth2 userinfo error:', oauthError);
        }
      }

      // Final fallback
      return { name: 'Google User (API Failed)', email: 'user@gmail.com' };

    } catch (error) {
      console.error('‚ùå [DEBUG] Error getting user profile:', error);
      return { name: 'Google User (Error)', email: 'user@gmail.com' };
    }
  }

  // Products CRUD
  // Products CRUD
  async getProducts(): Promise<Product[]> {
    console.log(' Fetching products from Google Sheets...');

    try {
      if (!window.gapi || !window.gapi.client || !window.gapi.client.sheets) {
        console.error('‚ùå Google Sheets API not initialized');
        throw new Error('Google Sheets API not initialized');
      }

      const response = await window.gapi.client.sheets.spreadsheets.values.get({
        spreadsheetId: GOOGLE_CONFIG.SPREADSHEET_ID,
        range: GOOGLE_CONFIG.RANGES.PRODUCTS,
      });

      const rows = response.result.values || [];
      console.log(`‚úÖ Retrieved ${rows.length} rows from Google Sheets`);
      
      const products = rows.slice(1).map((row: any[]) => ({
        id: row[0] || '',
        name: row[1] || '',
        category: row[2] || '',
        price: parseFloat(row[3]) || 0,
        stock: parseInt(row[4]) || 0,
        cost: parseFloat(row[5]) || 0,
        description: row[6] || '',
        status: row[7] || 'Active',
      }));
      
      console.log(`üì¶ Processed ${products.length} products`);
      return products;
    } catch (error) {
      console.error('Error fetching products:', error);
      throw error; // Don't fall back to demo, throw the error
    }
  }

  async addProduct(product: Omit<Product, 'id'>): Promise<boolean> {
    console.log('‚ûï Adding product to Google Sheets:', product);

    try {
      if (!window.gapi || !window.gapi.client || !window.gapi.client.sheets) {
        console.error('Google Sheets API not initialized');
        return false;
      }

      const id = 'PRD_' + Date.now();
      const values = [[
        id,
        product.name,
        product.category,
        product.price,
        product.stock,
        product.cost,
        product.description,
        product.status
      ]];

      await window.gapi.client.sheets.spreadsheets.values.append({
        spreadsheetId: GOOGLE_CONFIG.SPREADSHEET_ID,
        range: GOOGLE_CONFIG.RANGES.PRODUCTS,
        valueInputOption: 'RAW',
        resource: { values }
      });

      return true;
    } catch (error) {
      console.error('Error adding product:', error);
      return false;
    }
  }

  async updateProduct(product: Product): Promise<boolean> {
    if (DEMO_MODE) {
      console.log('Demo: Updating product:', product);
      return true;
    }

    try {
      if (!window.gapi || !window.gapi.client || !window.gapi.client.sheets) {
        console.error('Google Sheets API not initialized');
        return false;
      }

      // First, find the row with this product ID
      const response = await window.gapi.client.sheets.spreadsheets.values.get({
        spreadsheetId: GOOGLE_CONFIG.SPREADSHEET_ID,
        range: GOOGLE_CONFIG.RANGES.PRODUCTS,
      });

      const rows = response.result.values || [];
      const rowIndex = rows.findIndex((row: any[]) => row[0] === product.id);
      
      if (rowIndex === -1) {
        console.error('Product not found for update');
        return false;
      }

      // Update the specific row (rowIndex + 1 because sheets are 1-indexed)
      const range = `Products!A${rowIndex + 1}:H${rowIndex + 1}`;
      const values = [[
        product.id,
        product.name,
        product.category,
        product.price,
        product.stock,
        product.cost,
        product.description,
        product.status
      ]];

      await window.gapi.client.sheets.spreadsheets.values.update({
        spreadsheetId: GOOGLE_CONFIG.SPREADSHEET_ID,
        range: range,
        valueInputOption: 'RAW',
        resource: { values }
      });

      return true;
    } catch (error) {
      console.error('Error updating product:', error);
      return false;
    }
  }

  async deleteProduct(productId: string): Promise<boolean> {
    if (DEMO_MODE) {
      console.log('Demo: Deleting product:', productId);
      return true;
    }

    console.log('üóëÔ∏è [DELETE] Starting product deletion:', productId);

    try {
      if (!window.gapi || !window.gapi.client || !window.gapi.client.sheets) {
        console.error('‚ùå [DELETE] Google Sheets API not initialized');
        return false;
      }

      // First, get spreadsheet metadata to find the correct sheet ID
      console.log('üîç [DELETE] Getting spreadsheet metadata...');
      const metaResponse = await window.gapi.client.sheets.spreadsheets.get({
        spreadsheetId: GOOGLE_CONFIG.SPREADSHEET_ID,
      });

      const sheets = metaResponse.result.sheets || [];
      const productsSheet = sheets.find((sheet: any) => sheet.properties.title === 'Products');
      
      if (!productsSheet) {
        console.error('‚ùå [DELETE] Products sheet not found');
        return false;
      }

      const sheetId = productsSheet.properties.sheetId;
      console.log('‚úÖ [DELETE] Found Products sheet ID:', sheetId);

      // Find the row with this product ID
      console.log('üîç [DELETE] Looking for product in sheet...');
      const response = await window.gapi.client.sheets.spreadsheets.values.get({
        spreadsheetId: GOOGLE_CONFIG.SPREADSHEET_ID,
        range: GOOGLE_CONFIG.RANGES.PRODUCTS,
      });

      const rows = response.result.values || [];
      const rowIndex = rows.findIndex((row: any[]) => row[0] === productId);
      
      if (rowIndex === -1) {
        console.error('‚ùå [DELETE] Product not found for deletion:', productId);
        return false;
      }

      console.log('‚úÖ [DELETE] Found product at row:', rowIndex + 1);

      // Delete the row using the correct sheet ID
      console.log('üóëÔ∏è [DELETE] Deleting row from sheet...');
      const deleteResult = await window.gapi.client.sheets.spreadsheets.batchUpdate({
        spreadsheetId: GOOGLE_CONFIG.SPREADSHEET_ID,
        resource: {
          requests: [{
            deleteDimension: {
              range: {
                sheetId: sheetId,
                dimension: 'ROWS',
                startIndex: rowIndex,
                endIndex: rowIndex + 1
              }
            }
          }]
        }
      });

      console.log('‚úÖ [DELETE] Delete operation completed:', deleteResult);
      return true;
    } catch (error) {
      console.error('‚ùå [DELETE] Error deleting product:', error);
      return false;
    }
  }

  // Sales CRUD
  async getSales(): Promise<Sale[]> {
    if (DEMO_MODE) {
      return this.getDemoSales();
    }

    try {
      if (!window.gapi || !window.gapi.client || !window.gapi.client.sheets) {
        console.error('Google Sheets API not initialized');
        return this.getDemoSales();
      }

      const response = await window.gapi.client.sheets.spreadsheets.values.get({
        spreadsheetId: GOOGLE_CONFIG.SPREADSHEET_ID,
        range: GOOGLE_CONFIG.RANGES.SALES,
      });

      const rows = response.result.values || [];
      return rows.slice(1).map((row: any[]) => ({
        id: row[0] || '',
        date: row[1] || '',
        product: row[2] || '',
        quantity: parseInt(row[3]) || 0,
        price: parseFloat(row[4]) || 0,
        total: parseFloat(row[5]) || 0,
        customer: row[6] || '',
      }));
    } catch (error) {
      console.error('Error fetching sales:', error);
      return this.getDemoSales();
    }
  }

  async addSale(sale: Omit<Sale, 'id'>): Promise<boolean> {
    console.log('üíæ [SHEETS] addSale called:', sale);
    
    if (DEMO_MODE) {
      console.log('üé≠ [SHEETS] Demo mode: Adding sale:', sale);
      return true;
    }

    try {
      if (!window.gapi || !window.gapi.client || !window.gapi.client.sheets) {
        console.error('‚ùå [SHEETS] Google Sheets API not initialized');
        return false;
      }

      const id = 'SAL_' + Date.now();
      const values = [[
        id,
        sale.date,
        sale.product,
        sale.quantity,
        sale.price,
        sale.total,
        sale.customer
      ]];

      console.log('üì§ [SHEETS] Appending sale data:', values);

      const response = await window.gapi.client.sheets.spreadsheets.values.append({
        spreadsheetId: GOOGLE_CONFIG.SPREADSHEET_ID,
        range: GOOGLE_CONFIG.RANGES.SALES,
        valueInputOption: 'RAW',
        resource: { values }
      });

      console.log('‚úÖ [SHEETS] Sale added successfully:', response);
      return true;
    } catch (error) {
      console.error('‚ùå [SHEETS] Error adding sale:', error);
      return false;
    }
  }

  // Purchases CRUD
  async getPurchases(): Promise<Purchase[]> {
    if (DEMO_MODE) {
      return this.getDemoPurchases();
    }

    try {
      if (!window.gapi || !window.gapi.client || !window.gapi.client.sheets) {
        console.error('Google Sheets API not initialized');
        return this.getDemoPurchases();
      }

      const response = await window.gapi.client.sheets.spreadsheets.values.get({
        spreadsheetId: GOOGLE_CONFIG.SPREADSHEET_ID,
        range: GOOGLE_CONFIG.RANGES.PURCHASES,
      });

      const rows = response.result.values || [];
      return rows.slice(1).map((row: any[]) => ({
        id: row[0] || '',
        date: row[1] || '',
        product: row[2] || '',
        quantity: parseInt(row[3]) || 0,
        cost: parseFloat(row[4]) || 0,
        total: parseFloat(row[5]) || 0,
        supplier: row[6] || '',
      }));
    } catch (error) {
      console.error('Error fetching purchases:', error);
      return this.getDemoPurchases();
    }
  }

  async addPurchase(purchase: Omit<Purchase, 'id'>): Promise<boolean> {
    console.log('üíæ [SHEETS] addPurchase called:', purchase);
    
    if (DEMO_MODE) {
      console.log('üé≠ [SHEETS] Demo mode: Adding purchase:', purchase);
      return true;
    }

    try {
      if (!window.gapi || !window.gapi.client || !window.gapi.client.sheets) {
        console.error('‚ùå [SHEETS] Google Sheets API not initialized');
        return false;
      }

      const id = 'PUR_' + Date.now();
      const values = [[
        id,
        purchase.date,
        purchase.product,
        purchase.quantity,
        purchase.cost,
        purchase.total,
        purchase.supplier
      ]];

      console.log('üì§ [SHEETS] Appending purchase data:', values);

      const response = await window.gapi.client.sheets.spreadsheets.values.append({
        spreadsheetId: GOOGLE_CONFIG.SPREADSHEET_ID,
        range: GOOGLE_CONFIG.RANGES.PURCHASES,
        valueInputOption: 'RAW',
        resource: { values }
      });

      console.log('‚úÖ [SHEETS] Purchase added successfully:', response);
      return true;
    } catch (error) {
      console.error('‚ùå [SHEETS] Error adding purchase:', error);
      return false;
    }
  }

  // Dashboard metrics
  async getDashboardMetrics(): Promise<DashboardMetrics> {
    const products = await this.getProducts();
    const sales = await this.getSales();
    const purchases = await this.getPurchases();

    const totalProducts = products.length;
    const totalSales = sales.length;
    const totalRevenue = sales.reduce((sum, sale) => sum + sale.total, 0);
    const totalPurchases = purchases.length;
    const totalCost = purchases.reduce((sum, purchase) => sum + purchase.total, 0);
    const profit = totalRevenue - totalCost;

    // Top products by sales volume
    const productSales = sales.reduce((acc, sale) => {
      acc[sale.product] = (acc[sale.product] || 0) + sale.quantity;
      return acc;
    }, {} as Record<string, number>);

    const topProducts = Object.entries(productSales)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 5)
      .map(([name, sales]) => ({ name, sales }));

    // Monthly sales (last 12 months)
    const monthlySales = this.calculateMonthlySales(sales);

    return {
      totalProducts,
      totalSales,
      totalRevenue,
      totalPurchases,
      totalCost,
      profit,
      topProducts,
      monthlySales
    };
  }

  private calculateMonthlySales(sales: Sale[]) {
    const months = [];
    const now = new Date();
    
    for (let i = 11; i >= 0; i--) {
      const date = new Date(now.getFullYear(), now.getMonth() - i, 1);
      const monthStr = date.toLocaleDateString('id-ID', { year: 'numeric', month: '2-digit' });
      
      const monthSales = sales
        .filter(sale => sale.date.startsWith(monthStr))
        .reduce((sum, sale) => sum + sale.total, 0);
      
      months.push({
        month: date.toLocaleDateString('id-ID', { month: 'short', year: 'numeric' }),
        amount: monthSales
      });
    }
    
    return months;
  }

  // Verify and setup spreadsheet structure
  async verifySpreadsheetStructure(): Promise<any> {
    if (DEMO_MODE) {
      console.log('üì± Demo mode: skipping spreadsheet verification');
      return { success: true, message: 'Demo mode - verification skipped' };
    }

    try {
      console.log('üîç Verifying spreadsheet structure...');
      
      if (!window.gapi || !window.gapi.client || !window.gapi.client.sheets) {
        return { success: false, message: 'Google Sheets API not initialized' };
      }

      // Get spreadsheet metadata
      const metaResponse = await window.gapi.client.sheets.spreadsheets.get({
        spreadsheetId: GOOGLE_CONFIG.SPREADSHEET_ID,
      });

      const sheets = metaResponse.result.sheets || [];
      const sheetNames = sheets.map((sheet: any) => sheet.properties.title);
      
      console.log('üìã Found sheets:', sheetNames);

      const requiredSheets = ['Products', 'Sales', 'Purchases', 'Dashboard'];
      const missingSheets = requiredSheets.filter(name => !sheetNames.includes(name));
      
      const verification = {
        success: missingSheets.length === 0,
        foundSheets: sheetNames,
        requiredSheets: requiredSheets,
        missingSheets: missingSheets,
        spreadsheetId: GOOGLE_CONFIG.SPREADSHEET_ID,
        spreadsheetTitle: metaResponse.result.properties?.title || 'Unknown'
      };

      console.log('‚úÖ Spreadsheet verification complete:', verification);
      return verification;

    } catch (error) {
      console.error('‚ùå Error verifying spreadsheet:', error);
      return { 
        success: false, 
        error: error,
        message: 'Failed to verify spreadsheet structure'
      };
    }
  }

  // Check data in each sheet
  async checkSheetData(): Promise<any> {
    if (DEMO_MODE) {
      return { success: true, message: 'Demo mode - using demo data' };
    }

    try {
      console.log('üìä Checking data in sheets...');

      const results = {};

      // Check Products sheet
      try {
        const productsResponse = await window.gapi.client.sheets.spreadsheets.values.get({
          spreadsheetId: GOOGLE_CONFIG.SPREADSHEET_ID,
          range: GOOGLE_CONFIG.RANGES.PRODUCTS,
        });
        const productsRows = productsResponse.result.values || [];
        (results as any).products = {
          success: true,
          rowCount: productsRows.length,
          hasHeader: productsRows.length > 0 && productsRows[0].includes('ID'),
          dataRows: productsRows.length - 1,
          sample: productsRows[1] || null
        };
      } catch (error) {
        (results as any).products = { success: false, error: error };
      }

      // Check Sales sheet
      try {
        const salesResponse = await window.gapi.client.sheets.spreadsheets.values.get({
          spreadsheetId: GOOGLE_CONFIG.SPREADSHEET_ID,
          range: GOOGLE_CONFIG.RANGES.SALES,
        });
        const salesRows = salesResponse.result.values || [];
        (results as any).sales = {
          success: true,
          rowCount: salesRows.length,
          hasHeader: salesRows.length > 0 && salesRows[0].includes('ID'),
          dataRows: salesRows.length - 1,
          sample: salesRows[1] || null
        };
      } catch (error) {
        (results as any).sales = { success: false, error: error };
      }

      // Check Purchases sheet
      try {
        const purchasesResponse = await window.gapi.client.sheets.spreadsheets.values.get({
          spreadsheetId: GOOGLE_CONFIG.SPREADSHEET_ID,
          range: GOOGLE_CONFIG.RANGES.PURCHASES,
        });
        const purchasesRows = purchasesResponse.result.values || [];
        (results as any).purchases = {
          success: true,
          rowCount: purchasesRows.length,
          hasHeader: purchasesRows.length > 0 && purchasesRows[0].includes('ID'),
          dataRows: purchasesRows.length - 1,
          sample: purchasesRows[1] || null
        };
      } catch (error) {
        (results as any).purchases = { success: false, error: error };
      }

      // Check Dashboard sheet
      try {
        const dashboardResponse = await window.gapi.client.sheets.spreadsheets.values.get({
          spreadsheetId: GOOGLE_CONFIG.SPREADSHEET_ID,
          range: GOOGLE_CONFIG.RANGES.DASHBOARD,
        });
        const dashboardRows = dashboardResponse.result.values || [];
        (results as any).dashboard = {
          success: true,
          rowCount: dashboardRows.length,
          hasHeader: dashboardRows.length > 0 && dashboardRows[0].includes('Key'),
          dataRows: dashboardRows.length - 1,
          sample: dashboardRows[1] || null
        };
      } catch (error) {
        (results as any).dashboard = { success: false, error: error };
      }

      console.log('‚úÖ Sheet data check complete:', results);
      return { success: true, results };

    } catch (error) {
      console.error('‚ùå Error checking sheet data:', error);
      return { success: false, error: error };
    }
  }

  // Demo data for testing
  private getDemoProducts(): Product[] {
    return [
      { id: 'PRD_001', name: 'E-Book Premium', category: 'Digital Books', price: 150000, stock: 50, cost: 75000, description: 'Buku digital premium tentang teknologi', status: 'Active' },
      { id: 'PRD_002', name: 'Online Course', category: 'Education', price: 500000, stock: 30, cost: 200000, description: 'Kursus online programming', status: 'Active' },
      { id: 'PRD_003', name: 'Software License', category: 'Software', price: 1000000, stock: 10, cost: 400000, description: 'Lisensi software development', status: 'Active' },
      { id: 'PRD_004', name: 'Digital Template', category: 'Design', price: 75000, stock: 100, cost: 25000, description: 'Template desain website', status: 'Active' },
      { id: 'PRD_005', name: 'Mobile App', category: 'Software', price: 200000, stock: 25, cost: 80000, description: 'Aplikasi mobile premium', status: 'Active' },
    ];
  }

  private getDemoSales(): Sale[] {
    return [
      { id: 'SAL_001', date: '2025-01-01', product: 'E-Book Premium', quantity: 5, price: 150000, total: 750000, customer: 'John Doe' },
      { id: 'SAL_002', date: '2025-01-02', product: 'Online Course', quantity: 2, price: 500000, total: 1000000, customer: 'Jane Smith' },
      { id: 'SAL_003', date: '2025-01-03', product: 'Digital Template', quantity: 10, price: 75000, total: 750000, customer: 'Bob Wilson' },
    ];
  }

  private getDemoPurchases(): Purchase[] {
    return [
      { id: 'PUR_001', date: '2025-01-01', product: 'E-Book Premium', quantity: 20, cost: 75000, total: 1500000, supplier: 'Content Creator A' },
      { id: 'PUR_002', date: '2025-01-02', product: 'Online Course', quantity: 10, cost: 200000, total: 2000000, supplier: 'Education Provider B' },
    ];
  }
}

export const googleSheetsService = new GoogleSheetsService();

// Add service to window for debugging
declare global {
  interface Window {
    googleSheetsService: GoogleSheetsService;
  }
}

if (typeof window !== 'undefined') {
  window.googleSheetsService = googleSheetsService;
  console.log('üîß [SERVICE] GoogleSheetsService added to window object for debugging');
}
